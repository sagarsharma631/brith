	#include<iostream>
  #define DEBUG
  
  using namespace std;
  
  template<typename T>
	class matrix {
	private:
		const int m_iRows;	// Once set cannot be changed
		const int m_iCols;	// Once set cannot be changed
		T** m_pMatrix;

		T* getBasePointer(int index) const{
			if (!isInRange(index)) {
				return NULL;
			}
			return m_pMatrix[index];
		}
	protected:
	public:
		matrix(int rows = 3, int cols = 3):m_iRows(rows),
			m_iCols(cols){
			m_pMatrix = new T* [m_iRows];
			for (int i = 0; i < m_iRows; ++i) {
				m_pMatrix[i] = new T[cols] {0};
			}
		}

		int getRows() const{
			return m_iRows;
		}

		int getCols() const {
			return m_iCols;
		}

		T* operator[](int index){
			return getBasePointer(index);
		}

		T* operator[](int index) const {
			return getBasePointer(index);
		}

		bool isInRange(const int &rows) const{
			return (rows >= 0 && rows < m_iRows);
		}

		~matrix() {
			// delete each array allocated.
			for (int index = 0; index < m_iRows; ++index) {
				delete[] m_pMatrix[index];
			}
		}
	};
  
template<typename T>
void serchSorted2DMatrix(const matrix<T>& sample, const int& search, int& foundRowIndex, int& foundColIndex) {
	int rowIndex = sample.getRows() - 1;
	int colIndex = 0;
	while (sample.isInRange(rowIndex) && sample.isInRange(colIndex)) {
		if (search == sample[rowIndex][colIndex]) {
			foundRowIndex = rowIndex;
			foundColIndex = colIndex;
			return;
		}
		else if (search > sample[rowIndex][colIndex]) {
			colIndex += 1;
		}
		else {
			rowIndex -= 1;
		}
	}
	foundColIndex = -1;
	foundRowIndex = -1;
	return;
}

int main(int argc, char* argv[]) {
	genericUtils::matrix<int> myMatrix(4, 4);
	for (int index = 0; index < myMatrix.getRows(); ++index) {
		for (int j = 0; j < myMatrix.getCols(); ++j) {
			myMatrix[index][j] = index * j;
		}
	}
	for (int index = 0; index < myMatrix.getRows(); ++index) {
		for (int j = 0; j < myMatrix.getCols(); ++j) {
			std::cout << myMatrix[index][j] << " ";
		}
		std::cout << std::endl;
	}
	int row = 0;
	int col = 0;
	serchSorted2DMatrix<int>(myMatrix, 9, row, col);
#ifdef DEBUG
	std::cout << "Element found at row : " << row << " col : " << col << std::endl;
#endif  // DEBUG
	return 0;
}
